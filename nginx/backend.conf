server {
    listen 80;
    server_name stockholmes.store;

    # 프론트엔드 요청에 대한 처리
    location / {
        root /home/ec2-user/frontend/dist;  # 프론트엔드 빌드 파일 위치
        try_files $uri $uri/ /index.html;

        # 캐시 설정
        expires 1h;
        add_header Cache-Control "public, no-transform";
    }
}

server {
    listen 80;
    server_name api.stockholmes.store;

    # HTTPS로 리다이렉트
    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name api.stockholmes.store;

    # SSL 설정
    ssl_certificate /etc/letsencrypt/live/stockholmes.store-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/stockholmes.store-0001/privkey.pem;

    # SSL 설정 최적화
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # API 엔드포인트
    location /api {
        proxy_pass http://blue;  # 기본값은 blue

        # 프록시 설정
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # CORS 설정
        add_header 'Access-Control-Allow-Origin' 'https://stockholmes.store' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;  # 쿠키 전송을 위해 필요

        # preflight 요청 처리
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://stockholmes.store' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 86400;
            return 204;
        }
    }

    # Health check
    location /health {
        access_log off;
        return 200 'OK';
        add_header Content-Type text/plain;
    }
}