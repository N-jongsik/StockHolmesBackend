<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.wms.infrastructure.mapper.InboundCheckMapper">
    <select id="findInboundCheckFilteringWithPagination" resultMap="InboundAllProductResultMap">
        SELECT
        b.inbound_id,
        b.inbound_status,
        b.created_at,
        b.schedule_number,
        b.schedule_date,
        b.check_number,
        b.check_date,
        b.order_id,
        b.order_number,
        b.order_date,
        b.supplier_id,
        s.supplier_name,
        p.product_id,
        p.product_code,
        p.product_name,
        op.product_count AS product_count,
        p.stock_lot_count AS stock_lot_count,
        op.defective_count AS defective_count
        FROM (
        SELECT
        i.inbound_id,
        i.inbound_status,
        i.created_at,
        i.schedule_number,
        i.schedule_date,
        i.check_number,
        i.check_date,
        i.order_id,
        o.order_number,
        o.order_date,
        o.supplier_id
        FROM inbound i
        INNER JOIN `order` o ON i.order_id = o.order_id
        <where>
            check_number IS NOT NULL
            AND put_away_number IS NULL
            <if test="startDate != null">
                AND check_date <![CDATA[>=]]> #{startDate}
            </if>
            <if test="endDate != null">
                AND check_date <![CDATA[<=]]> #{endDate}
            </if>
            <if test="inboundCheckNumber != null and inboundCheckNumber != ''">
                AND check_number LIKE CONCAT('%', #{inboundCheckNumber}, '%')
            </if>
        </where>

        <if test="pageable.sort.sorted">
            <trim prefix="ORDER BY">
                <foreach item="order" index="i" collection="pageable.sort" separator=", ">
                    ${order.property}
                    <choose>
                        <when test="order.direction.toString() == 'ASC'">ASC</when>
                        <otherwise>DESC</otherwise>
                    </choose>
                </foreach>
            </trim>
        </if>
        LIMIT #{pageable.pageSize} OFFSET #{pageable.offset}
        ) b
        INNER JOIN order_product op ON b.order_id = op.order_id
        INNER JOIN product p ON op.product_id = p.product_id
        INNER JOIN supplier s ON b.supplier_id = s.supplier_id
    </select>

    <select id="countAllInboundCheckFiltering" resultType="int">
        SELECT COUNT(*)
        FROM inbound
        <where>
            check_number is not null AND put_away_number is null
            <if test="startDate != null">
                AND
                check_date <![CDATA[>=]]> #{startDate}
            </if>

            <if test="endDate != null">
                AND
                check_date <![CDATA[<=]]> #{endDate}
            </if>

            <if test="inboundCheckNumber != null and inboundCheckNumber != ''">
                AND
                check_number LIKE CONCAT('%', #{inboundCheckNumber}, '%')
            </if>
        </where>
    </select>
    <resultMap id="InboundAllProductResultMap" type="com.example.wms.inbound.adapter.in.dto.response.InboundAllProductDto">
        <id column="inbound_id" property="inboundId"/>
        <result column="inbound_status" property="inboundStatus"/>
        <result column="created_at" property="createdAt"/>
        <result column="schedule_number" property="scheduleNumber"/>
        <result column="schedule_date" property="scheduleDate"/>
        <result column="check_number" property="inboundCheckNumber"/>
        <result column="check_date" property="checkDate"/>
        <result column="order_id" property="orderId"/>
        <result column="order_number" property="orderNumber"/>
        <result column="order_date" property="orderDate"/>
        <result column="supplier_id" property="supplierId"/>
        <result column="supplier_name" property="supplierName"/>
        <collection property="productList" ofType="com.example.wms.inbound.adapter.in.dto.response.InboundProductDto">
            <id property="productId" column="product_id"/>
            <result property="productCode" column="product_code"/>
            <result property="productName" column="product_name"/>
            <result property="productCount" column="product_count"/>
            <result property="stockLotCount" column="stock_lot_count"/>
            <result property="defectiveCount" column="defective_count"/>
        </collection>
    </resultMap>
</mapper>