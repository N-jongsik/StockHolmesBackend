plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.18'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

jacoco {
    toolVersion = "0.8.8"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-json'

    // MySQL
    implementation 'mysql:mysql-connector-java:8.0.32'
    implementation 'org.apache.tomcat:tomcat-jdbc:9.0.71'

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'
    implementation 'org.mybatis:mybatis:3.5.9'

    // Test Containers
    testImplementation 'org.testcontainers:junit-jupiter:1.18.3'
    testImplementation 'org.testcontainers:mysql:1.18.3'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'io.lettuce:lettuce-core:6.1.10.RELEASE'
    implementation 'org.apache.commons:commons-pool2:2.11.1'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'

    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test:5.7.11'

    // JWT
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.5'

    // Selenium
    implementation 'org.seleniumhq.selenium:selenium-java:4.1.2'

    // H2 Database
    runtimeOnly 'com.h2database:h2:2.1.212'

    // logging
    implementation 'org.slf4j:slf4j-api:1.7.36'

    // pdf
    implementation 'com.itextpdf:itext7-core:7.2.2'
}

tasks.named('jar') {
    enabled = false
}

// 테스트 비활성화
test {
    enabled = true
}

// main 클래스 지정
bootJar {
    mainClass = 'com.example.wms.WmsApplication'
}


jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = false
        csv.required = false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/*Application*",
                            "**/*Mapper*",
                            "**/*Provider*",
                            "**/*Config*",
                            "**/*Util*",
                            "**/*Request*",
                            "**/*Response*",
                            "**/*Entity*",
                            "**/common"
                    ] + Qdomains)
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'
            includes = []

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            excludes = [
                    "**.*Application*",
                    "**.*Mapper*",
                    "**.*Provider*",
                    "**.*Config*",
                    "**.*Request*",
                    "**.*Response*",
                    "**.*Entity*"
            ] + Qdomains
        }
    }
}